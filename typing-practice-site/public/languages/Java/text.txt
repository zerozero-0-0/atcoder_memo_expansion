import java.util.*;
import java.util.stream.*;
import java.util.concurrent.*;
import java.util.regex.*;
import java.io.*;
import java.nio.file.*;
import java.time.*;
import java.time.format.*;

// 基本構文と制御構造
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");

        // 配列とリスト
        int[] arr = {1, 2, 3, 4, 5};
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);

        // Streamとラムダ式
        list.stream()
            .filter(n -> n % 2 == 0)
            .map(n -> n * n)
            .forEach(System.out::println);

        // マップとセット
        Map<String, Integer> ageMap = new HashMap<>();
        ageMap.put("Alice", 30);
        ageMap.put("Bob", 25);
        for (Map.Entry<String, Integer> entry : ageMap.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
        Set<Integer> uniqueSet = new HashSet<>(Arrays.asList(1, 2, 2, 3));
        uniqueSet.forEach(System.out::println);

        // スレッドとExecutorService
        ExecutorService executor = Executors.newFixedThreadPool(2);
        executor.submit(() -> System.out.println("Task 1"));
        executor.submit(() -> System.out.println("Task 2"));
        executor.shutdown();

        // CompletableFuture
        CompletableFuture.supplyAsync(() -> "Hello, Future!")
            .thenApply(String::toUpperCase)
            .thenAccept(System.out::println);

        // 日付と時間
        LocalDateTime now = LocalDateTime.now();
        System.out.println("Current Time: " + now.format(DateTimeFormatter.ISO_DATE_TIME));

        // 正規表現
        Pattern pattern = Pattern.compile("\\w+@\\w+\\.\\w+");
        Matcher matcher = pattern.matcher("test@example.com");
        if (matcher.find()) {
            System.out.println("Matched email: " + matcher.group());
        }

        // ファイル操作
        try {
            Files.write(Paths.get("example.txt"), "Hello, File!".getBytes());
            List<String> lines = Files.readAllLines(Paths.get("example.txt"));
            lines.forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // クラスと継承
        Shape shape = new Circle();
        shape.draw();

        // ジェネリクス
        Box<String> box = new Box<>();
        box.set("Hello, Generics!");
        System.out.println(box.get());
    }
}

// 抽象クラスとポリモーフィズム
abstract class Shape {
    abstract void draw();
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing Circle");
    }
}

// ジェネリクスの使用
class Box<T> {
    private T value;
    public void set(T value) { this.value = value; }
    public T get() { return value; }
}

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import java.util.regex.*;
import java.io.*;
import java.nio.file.*;
import java.time.*;
import java.time.format.*;
import java.security.*;
import java.util.logging.*;
import java.lang.reflect.*;
import java.net.*;

// 基本構文と制御構造
public class Main {
    public static void main(String[] args) throws Exception {
        System.out.println("Java Code Examples");

        // 配列とコレクション
        int[] numbers = {1, 2, 3, 4, 5};
        List<Integer> numList = Arrays.asList(1, 2, 3, 4, 5);
        numList.forEach(System.out::println);

        // Stream API
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
        names.stream()
            .filter(name -> name.startsWith("A"))
            .sorted()
            .forEach(System.out::println);

        // MapとSet
        Map<String, Integer> map = new HashMap<>();
        map.put("Alice", 30);
        map.put("Bob", 25);
        map.forEach((key, value) -> System.out.println(key + ": " + value));

        Set<Integer> uniqueNums = new TreeSet<>(Arrays.asList(4, 1, 2, 2, 3));
        uniqueNums.forEach(System.out::println);

        // オプショナル
        Optional<String> optional = Optional.of("Hello");
        optional.ifPresent(System.out::println);

        // マルチスレッドとExecutorService
        ExecutorService executor = Executors.newCachedThreadPool();
        Future<Integer> future = executor.submit(() -> 42);
        System.out.println("Future result: " + future.get());
        executor.shutdown();

        // CompletableFuture
        CompletableFuture.supplyAsync(() -> "Async Result")
            .thenApply(String::toUpperCase)
            .thenAccept(System.out::println);

        // 正規表現
        Pattern pattern = Pattern.compile("\\d+");
        Matcher matcher = pattern.matcher("There are 123 apples");
        while (matcher.find()) {
            System.out.println("Found number: " + matcher.group());
        }

        // 日付と時間
        LocalDateTime now = LocalDateTime.now();
        System.out.println("Now: " + now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));

        // ファイル操作
        String content = "File content";
        Files.write(Paths.get("example.txt"), content.getBytes());
        Files.lines(Paths.get("example.txt")).forEach(System.out::println);

        // 例外処理
        try {
            int result = 10 / 0;
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero");
        }

        // クラスとポリモーフィズム
        Shape shape = new Circle();
        shape.draw();

        // ジェネリクス
        Box<String> box = new Box<>();
        box.set("Generic Value");
        System.out.println(box.get());

        // リフレクション
        Class<?> clazz = Shape.class;
        for (Method method : clazz.getMethods()) {
            System.out.println("Method: " + method.getName());
        }

        // ロギング
        Logger logger = Logger.getLogger("ExampleLogger");
        logger.info("This is an info log");

        // ネットワーク処理
        URL url = new URL("https://jsonplaceholder.typicode.com/posts/1");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        }

        // 暗号化
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest("Hello".getBytes());
        System.out.println("Hash: " + Base64.getEncoder().encodeToString(hash));

        // Enumの使用
        Day today = Day.MONDAY;
        System.out.println("Today is: " + today);

        // ラムダ式と関数型インターフェース
        Function<Integer, Integer> square = x -> x * x;
        System.out.println("Square of 5: " + square.apply(5));

        // スレッドの同期
        Object lock = new Object();
        Thread t1 = new Thread(() -> {
            synchronized (lock) {
                System.out.println("Thread 1 is running");
            }
        });
        Thread t2 = new Thread(() -> {
            synchronized (lock) {
                System.out.println("Thread 2 is running");
            }
        });
        t1.start();
        t2.start();
        t1.join();
        t2.join();

        // デフォルトメソッド付きのインターフェース
        Greeting greeter = new FriendlyGreeting();
        greeter.sayHello();

        // プリミティブStream
        IntStream.range(1, 5).forEach(System.out::println);

        // 配列の操作
        int[] arr = {5, 3, 1, 4, 2};
        Arrays.sort(arr);
        System.out.println("Sorted array: " + Arrays.toString(arr));
    }
}

// クラスと抽象クラス
abstract class Shape {
    abstract void draw();
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing Circle");
    }
}

// ジェネリクスの使用
class Box<T> {
    private T value;
    public void set(T value) { this.value = value; }
    public T get() { return value; }
}

// Enum
enum Day {
    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
}

// インターフェースとデフォルトメソッド
interface Greeting {
    void sayHello();
    default void sayGoodbye() {
        System.out.println("Goodbye!");
    }
}

class FriendlyGreeting implements Greeting {
    @Override
    public void sayHello() {
        System.out.println("Hello!");
    }
}
